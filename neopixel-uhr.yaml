#substitutions:
#  devicename: neopixel-uhr
#  friendly_name: "Neopixel Uhr"
#
#  wifi_ssid: !secret wifi_ssid
#  wifi_password: !secret wifi_password
#  
#  uhr_animation: "Uhr2"
#  minimum_brightness: "30"


esphome:
  name: ${devicename}
  on_boot:
    priority: 800
    then:
      - ds1307.read_time:
          id: ds1307_time
      - delay: 5ms
      - light.turn_on: 
          id: neopixel_ring
          effect: ${uhr_animation}

esp8266:
  board: d1_mini

ota:
  password: "09ddd653496c905385d373fa18b6c5a2"

wifi:
  ssid: ${wifi_ssid}
  password: ${wifi_password}

  ap:
    ssid: ${devicename} Hotspot
    password: "YXXWEuCtplxs"

captive_portal:
logger:



api:
  encryption:
    key: "99xlZAKGxtHBJYZzZ3Tee9t5s4yEwKlOS0ZBIOOCQOs="
  services:
    - service: write_text
      variables:
        text: string
      then:
        - light.turn_on: 
            id: neopixel_ring
            effect: "Notify Animation"
        - globals.set:
            id: matrix_text
            value: !lambda 'return text;'
        - delay: 7s
        - light.turn_on: 
            id: neopixel_ring
            effect: ${uhr_animation}
        - delay: 20s
        - globals.set:
            id: matrix_text
            value: !lambda 'return "";'


#----------------------------
#   Globale Variablen
#----------------------------
globals:
  - id: matrix_text
    type: std::string
    restore_value: no
    initial_value: ''
  - id: anim_pos
    type: int
    restore_value: no
    initial_value: '0'



#--------------
#   RTC
#--------------
i2c:
  id: i2c_bus
  sda: D2
  scl: D1
  scan: true
  frequency: 50kHz

time:
  - platform: ds1307
    update_interval: never
    id: ds1307_time
    
  - platform: homeassistant
    on_time_sync:
      then:
        ds1307.write_time: 
          id: ds1307_time



#----------------------------
#   Helligkeitssensor
#----------------------------
sensor:
  - platform: adc
    id: brightness_sensor
    pin: A0
    name: ${friendly_name} Helligkeitssensor
    update_interval: 5s
    filters:
      - calibrate_linear:
          - 0.0 -> ${minimum_brightness}
          - 10.0 -> 100
    on_value:
      then:
        - script.execute: refresh_brightness

#----------------------------
#   LED Matrix (MAX7219)
#----------------------------
font:
  - file: "pixelmix.ttf"
    id: digit_font
    size: 8

spi:
  clk_pin: D5
  mosi_pin: D7

display:
  - platform: max7219digit
    id: matrix_display
    cs_pin: D6
    num_chips: 4
    intensity: 10
    scroll_enable: true
    scroll_mode: CONTINUOUS
    scroll_speed: 120ms
    scroll_delay: 3s
    scroll_dwell: 22s
    # Wenn Infotext vorhanden ist, diesen anzeigen. 
    # Ansonsten Datum auf Matrix ausgeben
    # id(matrix_display).printf(0, 0, id(digit_font), " %s . | .  ", id(matrix_text).c_str());
    # it.print(0,0, id(digit_font), id(matrix_text).c_str());
    lambda: |-
      if(strlen(id(matrix_text).c_str()) > 0){
        it.printf(0, 0, id(digit_font), " %s - - - ", id(matrix_text).c_str());
      } else {
        id(matrix_display).strftime(0, 0, id(digit_font), "%d.%m", id(ds1307_time).now());
      }



#----------------------------
#   Neopixel Ring LEDs
#----------------------------
light:
  - platform: neopixelbus
    id: neopixel_ring
    name: ${friendly_name} LED-Ring
    pin: D8
    num_leds: 60
    variant: WS2811
    type: GRB
    default_transition_length: 3s
    
    effects:
      - addressable_rainbow:
          name: "Rainbow"
          speed: 20
          width: 50

      - addressable_lambda:
          name: "Uhr1"
          update_interval: 16ms
          lambda: |-
            auto time = id(ds1307_time).now();

            int hour = time.hour>12 ? time.hour-12 : time.hour;
            int minute = time.minute;
            int second = time.second;

            hour = (hour * 5) + ceil(minute/20);

            it.range(0, 60) = Color::BLACK;

            it[hour>1?hour-2:59-(hour-2)] = ESPColor(0,128,0);
            it[hour>0?hour-1:59] = ESPColor(0,196,0);
            it[hour] = ESPColor(0,255,0);
            it[hour<59?hour+1:0] = ESPColor(0,196,0);
            it[hour<58?hour+2:hour+2-59] = ESPColor(0,128,0);

            it[minute>0 ? minute-1 : 59] = ESPColor(0,0,128);
            it[minute] = ESPColor(0,0,255);
            it[minute<59 ? minute+1 : 0] = ESPColor(0,0,128);

            it[second] = ESPColor(255,0,0);

            delay(10);

      - addressable_lambda:
          name: "Uhr2"
          update_interval: 16ms
          lambda: |-
            static int last_second = 0;
            static int sec_bright = 255;

            auto time = id(ds1307_time).now();

            int hour = time.hour>12 ? time.hour-12 : time.hour;
            int minute = time.minute;
            int second = time.second;

            if(second != last_second){
              last_second = second;
              sec_bright = 255;
            }

            hour = (hour * 5) + ceil(minute/20);

            it.range(0, 60) = Color::BLACK;

            it[hour>0?hour-1:59] = ESPColor(0,96,0);
            it[hour] = ESPColor(0,255,0);
            it[hour<59?hour+1:0] = ESPColor(0,96,0);

            it[minute] = ESPColor(0,0,255);

            it[second] = ESPColor(255-sec_bright,0,0);
            it[second>0?second-1:59] = ESPColor(sec_bright,0,0);

            delay(1);

            if(sec_bright > 10){
              sec_bright = sec_bright - 10;
            } else {
              sec_bright = 0;
            }

      - addressable_lambda:
          name: "Notify Animation"
          update_interval: 100ms
          lambda: |-
            static ESPColor color1, color2;

            if (initial_run) {
              id(anim_pos) = 0;
              color1 = ESPColor::random_color();
              color2 = ESPColor::random_color();
            }

            it[id(anim_pos)] = color1;
            it[59-id(anim_pos)] = color2;

            if(id(anim_pos) >= 59){
              id(anim_pos) = 0;
              color1 = ESPColor::random_color();
              color2 = ESPColor::random_color();

            } else {
              id(anim_pos)++;
            }




#----------------------------
#   Scripts
#----------------------------
script:
  - id: refresh_brightness
    then:
      - light.turn_on:
          id: neopixel_ring
          brightness: !lambda 'return id(brightness_sensor).state/100;'
      - lambda: |-
          int brightness = id(brightness_sensor).state;
          id(matrix_display).intensity(round(brightness/100*15));

